--- a/net/minecraft/world/item/crafting/ShapelessRecipe.java
+++ b/net/minecraft/world/item/crafting/ShapelessRecipe.java
@@ -19,12 +_,20 @@
     final CraftingBookCategory category;
     final ItemStack result;
     final NonNullList<Ingredient> ingredients;
+    private final boolean isSimple;
+    String override;
 
     public ShapelessRecipe(String p_249640_, CraftingBookCategory p_249390_, ItemStack p_252071_, NonNullList<Ingredient> p_250689_) {
         this.group = p_249640_;
         this.category = p_249390_;
         this.result = p_252071_;
         this.ingredients = p_250689_;
+        this.isSimple = p_250689_.stream().allMatch(Ingredient::isSimple);
+    }
+
+    public ShapelessRecipe(String group, CraftingBookCategory category, ItemStack result, NonNullList<Ingredient> ingredients, String override) {
+        this(group, category, result, ingredients);
+        this.override = override;
     }
 
     @Override
@@ -33,6 +_,11 @@
     }
 
     @Override
+    public String getOverride() {
+        return this.override;
+    }
+
+    @Override
     public String getGroup() {
         return this.group;
     }
@@ -54,17 +_,20 @@
 
     public boolean matches(CraftingContainer p_44262_, Level p_44263_) {
         StackedContents stackedcontents = new StackedContents();
+        java.util.List<ItemStack> inputs = new java.util.ArrayList<>();
         int i = 0;
 
         for(int j = 0; j < p_44262_.getContainerSize(); ++j) {
             ItemStack itemstack = p_44262_.getItem(j);
             if (!itemstack.isEmpty()) {
                 ++i;
+                if (isSimple)
                 stackedcontents.accountStack(itemstack, 1);
+                else inputs.add(itemstack);
             }
         }
 
-        return i == this.ingredients.size() && stackedcontents.canCraft(this, null);
+        return i == this.ingredients.size() && (isSimple ? stackedcontents.canCraft(this, null) : net.neoforged.neoforge.common.util.RecipeMatcher.findMatches(inputs,  this.ingredients) != null);
     }
 
     public ItemStack assemble(CraftingContainer p_44260_, RegistryAccess p_266797_) {
@@ -77,6 +_,7 @@
     }
 
     public static class Serializer implements RecipeSerializer<ShapelessRecipe> {
+        private static final net.minecraft.resources.ResourceLocation NAME = new net.minecraft.resources.ResourceLocation("minecraft", "crafting_shapeless");
         private static final Codec<ShapelessRecipe> CODEC = RecordCodecBuilder.create(
             p_311734_ -> p_311734_.group(
                         ExtraCodecs.strictOptionalField(Codec.STRING, "group", "").forGetter(p_301127_ -> p_301127_.group),
@@ -87,20 +_,20 @@
                             .fieldOf("ingredients")
                             .flatXmap(
                                 p_301021_ -> {
-                                    Ingredient[] aingredient = p_301021_.stream()
-                                        .filter(p_300883_ -> !p_300883_.isEmpty())
-                                        .toArray(p_300865_ -> new Ingredient[p_300865_]);
+                                    Ingredient[] aingredient = p_301021_
+                                              .toArray(Ingredient[]::new); //Forge skip the empty check and immediatly create the array.
                                     if (aingredient.length == 0) {
                                         return DataResult.error(() -> "No ingredients for shapeless recipe");
                                     } else {
-                                        return aingredient.length > 9
-                                            ? DataResult.error(() -> "Too many ingredients for shapeless recipe")
+                                        return aingredient.length > ShapedRecipePattern.maxHeight * ShapedRecipePattern.maxWidth
+                                            ? DataResult.error(() -> "Too many ingredients for shapeless recipe. The maximum is: %s".formatted(ShapedRecipePattern.maxHeight * ShapedRecipePattern.maxWidth))
                                             : DataResult.success(NonNullList.of(Ingredient.EMPTY, aingredient));
                                     }
                                 },
                                 DataResult::success
                             )
-                            .forGetter(p_300975_ -> p_300975_.ingredients)
+                            .forGetter(p_300975_ -> p_300975_.ingredients),
+                            ExtraCodecs.strictOptionalField(Codec.STRING, "override", "").forGetter(p_311729_ -> p_311729_.override)
                     )
                     .apply(p_311734_, ShapelessRecipe::new)
         );
@@ -121,7 +_,8 @@
             }
 
             ItemStack itemstack = p_44294_.readItem();
-            return new ShapelessRecipe(s, craftingbookcategory, itemstack, nonnulllist);
+            String override = p_44294_.readUtf();
+            return new ShapelessRecipe(s, craftingbookcategory, itemstack, nonnulllist, override);
         }
 
         public void toNetwork(FriendlyByteBuf p_44281_, ShapelessRecipe p_44282_) {
@@ -134,6 +_,7 @@
             }
 
             p_44281_.writeItem(p_44282_.result);
+            p_44281_.writeUtf(p_44282_.override);
         }
     }
 }
