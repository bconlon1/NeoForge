--- a/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/net/minecraft/world/item/crafting/RecipeManager.java
@@ -45,23 +_,40 @@
     }
 
     protected void apply(Map<ResourceLocation, JsonElement> p_44037_, ResourceManager p_44038_, ProfilerFiller p_44039_) {
+        var ops = this.makeConditionalOps();
         this.hasErrors = false;
-        Map<RecipeType<?>, Builder<ResourceLocation, RecipeHolder<?>>> map = Maps.newHashMap();
+        Map<RecipeType<?>, net.neoforged.neoforge.common.util.MutableHashedLinkedMap<ResourceLocation, RecipeHolder<?>>> map = Maps.newLinkedHashMap();
+        Map<RecipeType<?>, List<RecipeHolder<?>>> overrides = Maps.newLinkedHashMap();
         Builder<ResourceLocation, RecipeHolder<?>> builder = ImmutableMap.builder();
 
         for(Entry<ResourceLocation, JsonElement> entry : p_44037_.entrySet()) {
             ResourceLocation resourcelocation = entry.getKey();
+            if (resourcelocation.getPath().startsWith("_")) continue; //Forge: filter anything beginning with "_" as it's used for metadata.
 
             try {
-                RecipeHolder<?> recipeholder = fromJson(resourcelocation, GsonHelper.convertToJsonObject(entry.getValue(), "top element"));
-                map.computeIfAbsent(recipeholder.value().getType(), p_44075_ -> ImmutableMap.builder()).put(resourcelocation, recipeholder);
-                builder.put(resourcelocation, recipeholder);
+                Optional<RecipeHolder<?>> recipeHolderOptional = fromJson(resourcelocation, GsonHelper.convertToJsonObject(entry.getValue(), "top element"), ops);
+                recipeHolderOptional.ifPresentOrElse(recipeholder -> {
+                    if (recipeholder.value().getOverride() == null || recipeholder.value().getOverride().isEmpty()) {
+                        map.computeIfAbsent(recipeholder.value().getType(), p_44075_ -> new net.neoforged.neoforge.common.util.MutableHashedLinkedMap<>()).put(resourcelocation, recipeholder);
+                    } else {
+                        overrides.computeIfAbsent(recipeholder.value().getType(), p_44075_ -> new java.util.ArrayList<>()).add(recipeholder);
+                    }
+                    builder.put(resourcelocation, recipeholder);
+                }, () -> {
+                    LOGGER.debug("Skipping loading recipe {} as it's conditions were not met", resourcelocation);
+                });
             } catch (IllegalArgumentException | JsonParseException jsonparseexception) {
                 LOGGER.error("Parsing error loading recipe {}", resourcelocation, jsonparseexception);
             }
         }
 
-        this.recipes = map.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, p_44033_ -> ((Builder)p_44033_.getValue()).build()));
+        overrides.forEach((key, value) -> value.forEach((entry) -> { //todo safety checks
+            if (map.containsKey(key) && map.get(key).contains(new ResourceLocation(entry.value().getOverride()))) {
+                map.get(key).putBefore(new ResourceLocation(entry.value().getOverride()), entry.id(), entry);
+            }
+        }));
+
+        this.recipes = map.entrySet().stream().collect(ImmutableMap.toImmutableMap((e) -> e.getKey(), (e) -> ImmutableMap.copyOf(e.getValue())));
         this.byName = builder.build();
         LOGGER.info("Loaded {} recipes", map.size());
     }
@@ -136,9 +_,15 @@
         return this.recipes.values().stream().flatMap(p_220258_ -> p_220258_.keySet().stream());
     }
 
+    /** @deprecated Forge: use {@linkplain #fromJson(ResourceLocation, JsonObject, com.mojang.serialization.DynamicOps) overload with context}. */
+    @Deprecated
     protected static RecipeHolder<?> fromJson(ResourceLocation p_44046_, JsonObject p_44047_) {
-        Recipe<?> recipe = Util.getOrThrow(Recipe.CODEC.parse(JsonOps.INSTANCE, p_44047_), JsonParseException::new);
-        return new RecipeHolder<>(p_44046_, recipe);
+        return fromJson(p_44046_, p_44047_, JsonOps.INSTANCE).orElseThrow();
+    }
+
+    public static Optional<RecipeHolder<?>> fromJson(ResourceLocation p_44046_, JsonObject p_44047_, com.mojang.serialization.DynamicOps<com.google.gson.JsonElement> jsonElementOps) {
+        Optional<? extends Recipe<?>> recipe = net.neoforged.neoforge.common.conditions.ICondition.getWithWithConditionsCodec(Recipe.CONDITIONAL_CODEC, jsonElementOps, p_44047_);
+        return recipe.map(r -> new RecipeHolder<>(p_44046_, r));
     }
 
     public void replaceRecipes(Iterable<RecipeHolder<?>> p_44025_) {
